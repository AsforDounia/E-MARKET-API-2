services:
  mongo:
    image: mongo:7.0
    container_name: mongo
    command: ["--replSet", "rs0", "--bind_ip_all"]
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - dev_net
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo:27017'}]}) }" | mongosh --quiet
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
      
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - dev_net
    command: redis-server --appendonly yes

  # Mongo Express - Interface Web pour MongoDB
  mongo-express:
    image: mongo-express:latest
    container_name: mongo_express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://mongo:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - dev_net

  # API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: emarket_api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MONGO_URI=mongodb://mongo:27017/emarket_3?replicaSet=rs0
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./src:/app/src  # Hot reload pour le dev
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - dev_net

volumes:
  redis-data:
  mongo-data:

networks:
  dev_net:
    driver: bridge

